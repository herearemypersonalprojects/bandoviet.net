#Upload file
# Set the file size limit (default 1Mb). 
multipart.maxFileSize = 3Mb
# Total request size for a multipart/form-data (default 10Mb)
multipart.maxRequestSize = 20Mb

# Facebook login
spring.social.facebook.appId={{702339429897142}}
spring.social.facebook.appSecret={{5a966594a2132f704bc1c51759e92bfc}}

# INTERNATIONALIZATION (MessageSourceAutoConfiguration)
spring.messages.basename=messages
spring.messages.cache-seconds=-1
spring.messages.encoding=UTF-8

# JSP 
spring.view.prefix: /WEB-INF/jsp/
spring.view.suffix: .jsp
application.message: oK

# LOGGING
# Fine-tuning a specific logger (for a single class)
# Available levels are: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
logging.level.application.HomeController = INFO

# Specify the level for spring boot and hibernate's loggers
logging.level.org.springframework.web = ERROR
logging.level.org.hibernate = ERROR

# Log file location (in addition to the console)
logging.file = /var/www/html/bandoviet.log

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.port=8000
# session timeout in seconds
server.session-timeout=60000


# HTTP encoding (HttpEncodingProperties)
# the encoding of HTTP requests/responses
spring.http.encoding.charset=UTF-8
# enable http encoding support
spring.http.encoding.enabled=true
# force the configured encoding
spring.http.encoding.force=true

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Connection url for the database "map"
spring.datasource.url =jdbc:mysql://localhost/map?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8
spring.datasource.driverClassName=com.mysql.jdbc.Driver
# Username and password
spring.datasource.username = map
spring.datasource.password = map
# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#Encoding 
spring.jpa.properties.hibernate.connection.characterEncoding=utf-8
spring.jpa.properties.hibernate.connection.CharSet=utf-8
spring.jpa.properties.hibernate.connection.useUnicode=true

# Avoid error: Could not roll back JPA transaction; nested exception is 
# javax.persistence.PersistenceException: unexpected error when rollbacking.
# By default spring don't reconnect to mysql server and just return this error.
# Also another thing is that disconnection was just timeout of connection.
spring.datasource.connection-test-query=SELECT 1
spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=true
spring.datasource.validation-interval=10000
spring.datasource.log-validation-errors=true
spring.datasource.validation-query=SELECT 1

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Specify the DirectoryProvider to use (the Lucene Directory)
spring.jpa.properties.hibernate.search.default.directory_provider = filesystem

# Using the filesystem DirectoryProvider you also have to specify the default
# base directory for all indexes (make sure that the application have write
# permissions on such directory)
spring.jpa.properties.hibernate.search.default.indexBase = /Users/quocanh/bandoviet/lucene/indexes